import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

def load_data(filepath):
    ids = []
    titles = []
    genres = []
    plots = []
    with open(filepath, 'r', encoding='utf-8') as f:
        for line in f:
            parts = line.strip().split(' ::: ')
            if len(parts) == 4:
                ids.append(parts[0])
                titles.append(parts[1])
                genres.append(parts[2])
                plots.append(parts[3])
    return pd.DataFrame({'id': ids, 'title': titles, 'genre': genres, 'plot': plots})

train_df = load_data('train_data.txt')
test_df = load_data('test_data.txt')

X_train = train_df['plot']
y_train = train_df['genre']
X_test = test_df['plot']
y_test = test_df['genre']

vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)

X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = LogisticRegression(max_iter=1000)
model.fit(X_train_vec, y_train)

y_pred = model.predict(X_test_vec)

accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

new_movie_plot = ["A young wizard goes on a dangerous quest to destroy a powerful magical artifact."]
new_movie_plot_vec = vectorizer.transform(new_movie_plot)
predicted_genre = model.predict(new_movie_plot_vec)
print(f"Predicted genre for the new movie: {predicted_genre[0]}")
